(load "pieces/init.scm")
(load "pieces/lang1.scm")

(define (evaluate e env fenv) 
    (if (atom? e)                             ; (atom? e) == (not (pair? e))
	(cond ((symbol? e) (lookup e env))
	      ((or (number? e) (string? e) (char? e) (boolean? e) (vector? e))
	       e)
	      (else (wrong "Cannot evaluate" e)) )
	(case (car e)
	  ((quote)  (cadr e))
	  ((if)     (if (evaluate (cadr e) env fenv)
			(evaluate (caddr e) env fenv)
			(evaluate (cadddr e) env fenv) ))
	  ((begin)  (eprogn (cdr e) env fenv))
	  ((set!)   (update! (cadr e) env (evaluate (caddr e) env fenv) ))
	  ((lambda) (make-function (cadr e) (cddr e) env fenv))
	  (else     (evaluate-application (car e)
					  (evlis (cdr e) env fenv)
					  env
					  fenv )) ) ) )

(define (evlis exps env fenv)
  (if (pair? exps)
      (cons (evaluate (car exps) env fenv)
	    (evlis (cdr exps) env fenv) )
      '() ) )

(define (eprogn exps env fenv)
  (if (pair? exps)
      (if (pair? (cdr exps))
	  (begin (evalute (car exps) env fenv)
		 (eprogn (cdr exps) env fenv) )
	  (evaluate (car exps) env fenv) )
  empty-begin ) )

(define (evaluate-application fn args env fenv)
  (cond ((symbol? fn)
	 (invoke (lookup fn fenv) args) )
	((and (pair? fn) (eq? (car fn) 'lambda))
	 (eprogn (cddr fn)
		 (extend env (cadr fn) args)
		 fenv ) )
	(else (wrong "Incorrect functional term" fn)) ) )

(load "pieces/env-init.scm")

(define fenv.global env.init)

(define-syntax definitial
  (syntax-rules ()
    ((definitial name)
     (begin (set! env.global (extend env.global '(name) '(void)))
	    'name ) ) 
    ((definitial name value)
     (if (procedure? value)
	 (begin (set! fenv.global (extend fenv.global '(name) (list value)))
		'name)
	 (begin (set! env.global (extend env.global '(name) (list value)))
		'name )) ) ) )

(load "pieces/env-def.scm")
(load "pieces/repl.scm")

(define (repl)
  (define (toplevel)
    (display "l-i-s-p> ")
    (display (evaluate (read) env.global fenv.global))
    (newline)
    (toplevel))
  (toplevel) )

#!
(println "env.global")
(println env.global)
(newline)
(println "fenv.global")
(println fenv.global)
!#

(repl)