(load "pieces/init.scm")
(load "pieces/lang1.scm")

(define (evaluate e env) 
    (if (atom? e)                             ; (atom? e) == (not (pair? e))
	(cond ((symbol? e) (lookup e env))
	      ((or (number? e) (string? e) (char? e) (boolean? e) (vector? e))
	       e)
	      (else (wrong "Cannot evaluate" e)) )
	(case (car e)
	  ((quote)  (cadr e))
	  ((if)     (if (evaluate (cadr e) env)
			(evaluate (caddr e) env)
			(evaluate (cadddr e) env) ))
	  ((begin)  (eprogn (cdr e) env))
	  ((set!)   (update! (cadr e) env (evaluate (caddr e) env)))
	  ((lambda) (make-function (cadr e) (cddr e) env))
	  (else     (invoke (lookup (car e) env)
			    (evlis (cdr e) env) )) ) ) )


(load "pieces/env-init.scm")
(load "pieces/env-def.scm")
(load "pieces/repl.scm")

(repl)